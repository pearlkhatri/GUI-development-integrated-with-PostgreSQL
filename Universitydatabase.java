/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
//import javax.swing.JOptionPane;

package studentapp;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author tarun
 */
public class Universitydatabase extends javax.swing.JFrame {

    /**
     * Creates new form Universitydatabase
     */
    
    DefaultTableModel studentModel;
    DefaultTableModel courseModel;
    DefaultTableModel instructorModel;
    DBAccess dbAccess = new DBAccess();
    
    public Universitydatabase() {
        initComponents();
        studentModel = (DefaultTableModel) jTableStudent.getModel();
        courseModel = (DefaultTableModel) jTableCourse.getModel();
        instructorModel = (DefaultTableModel) jTableInstructor.getModel();
        

        populateGUITable();
        populatecourseTable();
        populateInstructorTable();
        
     
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButtonInsert = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableStudent = new javax.swing.JTable();
        txtMobile = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jCheckBoxMale = new javax.swing.JCheckBox();
        jCheckBoxFemale = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtcourse = new javax.swing.JTextField();
        txtCredits = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableCourse = new javax.swing.JTable();
        jButtonCourseInsert = new javax.swing.JButton();
        jButtoncourseUpdate = new javax.swing.JButton();
        jButtonCourseDelete = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtinstructorName = new javax.swing.JTextField();
        txtinstructorAge = new javax.swing.JTextField();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        txtinstructorMobile = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableInstructor = new javax.swing.JTable();
        jinsertInstructorButton = new javax.swing.JButton();
        jupdateInstructorButton = new javax.swing.JButton();
        jDeleteInstructorButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonInsert.setText("Insert");
        jButtonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonInsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 200, 140, 30));

        jTableStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Student Name", "Age", "Gender", "Mobile No"
            }
        ));
        jTableStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableStudentMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableStudent);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 580, 190));

        txtMobile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMobileActionPerformed(evt);
            }
        });
        jPanel1.add(txtMobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 132, 329, -1));
        jPanel1.add(txtAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 72, 329, -1));
        jPanel1.add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 44, 329, -1));

        jLabel6.setText("Mobile No -");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 135, 80, -1));

        jLabel5.setText("Gender -");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 102, 60, -1));

        jLabel4.setText("Age -");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 75, 50, -1));

        jLabel3.setText("Name - ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 47, 60, -1));

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 200, 130, 30));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 200, 130, 30));

        buttonGroup1.add(jCheckBoxMale);
        jCheckBoxMale.setText("Male");
        jCheckBoxMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMaleActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBoxMale, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 58, -1));

        buttonGroup1.add(jCheckBoxFemale);
        jCheckBoxFemale.setText("Female");
        jPanel1.add(jCheckBoxFemale, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, 85, -1));

        jTabbedPane1.addTab("Student", jPanel1);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setText("Course - ");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 65, 60, -1));

        jLabel9.setText("Credits -");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 105, 56, -1));
        jPanel2.add(txtcourse, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 62, 320, -1));
        jPanel2.add(txtCredits, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 102, 320, -1));

        jTableCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Course ID", "Title", "Credits"
            }
        ));
        jTableCourse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCourseMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableCourse);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 400, 270));

        jButtonCourseInsert.setText("Insert");
        jButtonCourseInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCourseInsertActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonCourseInsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, -1, -1));

        jButtoncourseUpdate.setText("Update");
        jButtoncourseUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtoncourseUpdateActionPerformed(evt);
            }
        });
        jPanel2.add(jButtoncourseUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 140, -1, -1));

        jButtonCourseDelete.setText("Delete");
        jButtonCourseDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCourseDeleteActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonCourseDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 140, 70, -1));

        jTabbedPane1.addTab("Course", jPanel2);

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setText("Name -");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 22, 43, -1));

        jLabel11.setText("Age -");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 56, 43, -1));

        jLabel12.setText("Gender -");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 89, 58, -1));

        jLabel13.setText("Mobile No - ");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 122, 76, -1));
        jPanel3.add(txtinstructorName, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 19, 345, -1));
        jPanel3.add(txtinstructorAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 53, 345, -1));

        buttonGroup2.add(jCheckBox3);
        jCheckBox3.setText("Male");
        jPanel3.add(jCheckBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 87, 59, -1));

        buttonGroup2.add(jCheckBox4);
        jCheckBox4.setText("Female");
        jPanel3.add(jCheckBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 87, 85, -1));
        jPanel3.add(txtinstructorMobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 119, 345, -1));

        jTableInstructor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Instructor Name", "Age", "Gender", "Mobile No"
            }
        ));
        jScrollPane1.setViewportView(jTableInstructor);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 450, 250));

        jinsertInstructorButton.setText("Insert");
        jinsertInstructorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jinsertInstructorButtonActionPerformed(evt);
            }
        });
        jPanel3.add(jinsertInstructorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, 70, -1));

        jupdateInstructorButton.setText("Update");
        jupdateInstructorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jupdateInstructorButtonActionPerformed(evt);
            }
        });
        jPanel3.add(jupdateInstructorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, -1, -1));

        jDeleteInstructorButton.setText("Delete");
        jDeleteInstructorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteInstructorButtonActionPerformed(evt);
            }
        });
        jPanel3.add(jDeleteInstructorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 160, -1, -1));

        jTabbedPane1.addTab("Instructor", jPanel3);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 620, 530));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(" University Database");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 30, 270, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertActionPerformed
         // TODO add your handling code here:
        Student student = new Student();
        studentModel = (DefaultTableModel) jTableStudent.getModel();
        if (validateFields()){
            
            //student.setId(Integer.valueOf(txtId.getText()));
            student.setName(txtName.getText());
            student.setAge(Integer.valueOf(txtAge.getText()));
            student.setMobileNumber(Long.valueOf(txtMobile.getText()));
            String gender = jCheckBoxMale.isSelected() ? "Male" : "Female";
            student.setGender(gender);
            dbAccess.InsertInStudent(student);
            //dbAccess.ReadStudentData();
            populateGUITable(); 
            JOptionPane.showMessageDialog(this, "Inserted Successfully");
        }

        //DefaultTableModel model = (DefaultTableModel) jTableStudent.getModel();
//        studentModel.addRow(new Object[]{student.getId(), student.getName(), student.getAge(), student.getGender(), student.getMobileNumber()});
//
//       resetFields();
        
    }//GEN-LAST:event_jButtonInsertActionPerformed

    private void jinsertInstructorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jinsertInstructorButtonActionPerformed
        // TODO add your handling code here:
        Instructor instructor = new Instructor();
        instructorModel = (DefaultTableModel) jTableInstructor.getModel();
        if (validateInstructorFields()){
            
            //student.setId(Integer.valueOf(txtId.getText()));
            instructor.setName(txtinstructorName.getText());
            instructor.setAge(Integer.valueOf(txtinstructorAge.getText()));
            instructor.setMobileNo(Long.valueOf(txtinstructorMobile.getText()));
            String gender = jCheckBox3.isSelected() ? "Male" : "Female";
            instructor.setGender(gender);
            dbAccess.InsertInInstructor(instructor);
            //dbAccess.ReadStudentData();
            populateInstructorTable(); 
            JOptionPane.showMessageDialog(this, "Inserted Successfully");
        }

    }//GEN-LAST:event_jinsertInstructorButtonActionPerformed

    private void jupdateInstructorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jupdateInstructorButtonActionPerformed
        // TODO add your handling code here:
        instructorModel = (DefaultTableModel) jTableInstructor.getModel();
        Instructor update = new Instructor();
        if(jTableInstructor.getSelectedRowCount()==1)
        {
            //if single row is selected then update 
            //String id = txtId.getText();
            String name = txtinstructorName.getText();
            String age = txtinstructorAge.getText();
            String mobile_no = txtinstructorMobile.getText();
            String gender = "";
//            if(jRadioButton1.isSelected()){
//                gender = "Male";
//            }
//            else{
//                gender = "Female";
//            }            
            //set updates value on table row
            //studentModel.setValueAt(id, jTableStudent.getSelectedRow(), 0);
            instructorModel.setValueAt(name, jTableInstructor.getSelectedRow(), 1);
            instructorModel.setValueAt(age, jTableInstructor.getSelectedRow(), 2);
            instructorModel.setValueAt(mobile_no, jTableInstructor.getSelectedRow(), 3);
            instructorModel.setValueAt(gender, jTableInstructor.getSelectedRow(), 4);
            
            //update message display 
            JOptionPane.showMessageDialog(this, "Updated Successfully");
            
            dbAccess.updateinInstructor(update);
        }
        else 
        {
                if(jTableStudent.getRowCount()==0){
                    //if table is empty
                    JOptionPane.showMessageDialog(this, "Table is empty");
            
                }   
                else
                {
                    //if row is not selected or multiple rows are selected
                    JOptionPane.showMessageDialog(this, "Please select a row for updation");
                }
        }                        
    }//GEN-LAST:event_jupdateInstructorButtonActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        //get jtable model first 
         studentModel = (DefaultTableModel) jTableStudent.getModel();
        
        Student stu = new Student();
         
         //delete row
        
         if(jTableStudent.getSelectedRowCount()==1){
            
            
             jTableStudent.getSelectedRow();
             Integer id = Integer.parseInt((String)studentModel.getValueAt(jTableStudent.getSelectedRow(), 0));
             dbAccess.deleteInStudent(id);
              studentModel.removeRow(jTableStudent.getSelectedRow());
         } 
         else{
             if(jTableStudent.getRowCount()==0){
                 //if table is empty, then display this message 
                 JOptionPane.showMessageDialog(this, "Table is empty");
             }else{
                 //if table is not empty but row is not selected or multiple rows are selected
                 JOptionPane.showMessageDialog(this, "Please select a row for deletion");
             }
             
         }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        //get table model
        studentModel = (DefaultTableModel) jTableStudent.getModel();
        Student st = new Student();
        if(jTableStudent.getSelectedRowCount()==1)
        {
            //if single row is selected then update 
            //String id = txtId.getText();
            String name = txtName.getText();
            String age = txtAge.getText();
            String mobile_no = txtMobile.getText();
            String gender = "";
            if(jCheckBoxMale.isSelected())
            {
                gender = "Male";
            }
             else
            {
                gender = "Female";
            }            
            //set updates value on table row
            //studentModel.setValueAt(id, jTableStudent.getSelectedRow(), 0);
            studentModel.setValueAt(name, jTableStudent.getSelectedRow(), 1);
            studentModel.setValueAt(age, jTableStudent.getSelectedRow(), 2);
            studentModel.setValueAt(mobile_no, jTableStudent.getSelectedRow(), 4);
            studentModel.setValueAt(gender, jTableStudent.getSelectedRow(), 3);
            
            //update message display 
            JOptionPane.showMessageDialog(this, "Updated Successfully");
            
            dbAccess.updateinStudent(st);
        }
        else 
        {
                if(jTableStudent.getRowCount()==0){
                    //if table is empty
                    JOptionPane.showMessageDialog(this, "Table is empty");
            
                }   
                else
                {
                    //if row is not selected or multiple rows are selected
                    JOptionPane.showMessageDialog(this, "Please select a row for updation");
                }
        }                                      
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void jTableStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableStudentMouseClicked
        // TODO add your handling code here:
        int rowIndex = jTableStudent.getSelectedRow();
        int colIndex = 0;
        Student student = new Student();
        student.setId(Integer.valueOf(jTableStudent.getValueAt(rowIndex, colIndex++).toString()));
        student.setName((String)jTableStudent.getValueAt(rowIndex, colIndex++).toString());
        student.setAge(Integer.valueOf(jTableStudent.getValueAt(rowIndex, colIndex++).toString()));
        student.setGender((String) jTableStudent.getValueAt(rowIndex, colIndex++));
        student.setMobileNumber(Long.valueOf(jTableStudent.getValueAt(rowIndex, colIndex++).toString()));
        System.out.println("Student Name = " + student.getName());
        
        this.populateGUITable(student);
    }//GEN-LAST:event_jTableStudentMouseClicked

    private void jCheckBoxMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMaleActionPerformed
          //jCheckBoxMale checkbox = (jCheckBoxMale) event.get
    }//GEN-LAST:event_jCheckBoxMaleActionPerformed

    private void txtMobileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMobileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMobileActionPerformed

    private void jButtonCourseInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCourseInsertActionPerformed
        // TODO add your handling code here:
        Course course = new Course();
        courseModel = (DefaultTableModel) jTableCourse.getModel();
        if (validateCourseFields()){
            
            //student.setId(Integer.valueOf(txtId.getText()));
            course.setCourse(txtcourse.getText());
            course.setCredits(Integer.valueOf(txtCredits.getText()));
            
            dbAccess.InsertInCourse(course);
            //dbAccess.ReadStudentData();
            populatecourseTable(); 
            JOptionPane.showMessageDialog(this, "Inserted Successfully");
        }

    }//GEN-LAST:event_jButtonCourseInsertActionPerformed

    private void jButtonCourseDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCourseDeleteActionPerformed
        // TODO add your handling code here:
         courseModel = (DefaultTableModel) jTableCourse.getModel();
        
        Course courseName = new Course();
         
         //delete row
        
         if(jTableCourse.getSelectedRowCount()==1){
            
            
             jTableCourse.getSelectedRow();
             Integer id = Integer.parseInt(courseModel.getValueAt(jTableCourse.getSelectedRow(), 0).toString());
             dbAccess.deleteInCourse(id);
             courseModel.removeRow(jTableCourse.getSelectedRow());
         } 
         else{
             if(jTableCourse.getRowCount()==0){
                 //if table is empty, then display this message 
                 JOptionPane.showMessageDialog(this, "Table is empty");
             }else{
                 //if table is not empty but row is not selected or multiple rows are selected
                 JOptionPane.showMessageDialog(this, "Please select a row for deletion");
             }
             
         }
    }//GEN-LAST:event_jButtonCourseDeleteActionPerformed

    private void jButtoncourseUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtoncourseUpdateActionPerformed
        // TODO add your handling code here:
        courseModel = (DefaultTableModel) jTableCourse.getModel();
        Course coursedetails = new Course();
        if(jTableCourse.getSelectedRowCount()==1)
        {
            //if single row is selected then update 
            //String id = txtId.getText();
            String course = txtcourse.getText();
            String credits = txtCredits.getText();
            
//            if(jRadioButton1.isSelected()){
//                gender = "Male";
//            }
//            else{
//                gender = "Female";
//            }            
            //set updates value on table row
            //courseModel.setValueAt(id, jTableStudent.getSelectedRow(), 0);
            courseModel.setValueAt(course, jTableCourse.getSelectedRow(), 1);
            courseModel.setValueAt(credits, jTableCourse.getSelectedRow(), 2);
            
            //update message display 
            JOptionPane.showMessageDialog(this, "Updated Successfully");
            
            dbAccess.updateinCourse(coursedetails);
        }
        else 
        {
                if(jTableStudent.getRowCount()==0){
                    //if table is empty
                    JOptionPane.showMessageDialog(this, "Table is empty");
            
                }   
                else
                {
                    //if row is not selected or multiple rows are selected
                    JOptionPane.showMessageDialog(this, "Please select a row for updation");
                }
        }                                    
    }//GEN-LAST:event_jButtoncourseUpdateActionPerformed

    private void jTableCourseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCourseMouseClicked
        // TODO add your handling code here:
        int RowIndex = jTableCourse.getSelectedRow();
        int ColIndex = 0;
        Course course = new Course();
        course.setId(Integer.valueOf(jTableCourse.getValueAt(RowIndex, ColIndex++).toString()));
        course.setCourse(jTableCourse.getValueAt(RowIndex, ColIndex++).toString());
        course.setCredits(Integer.valueOf(jTableCourse.getValueAt(RowIndex, ColIndex++).toString()));
        
        System.out.println("course = " + course.getCourse());
        
        this.populatecourseTable(course);
    }//GEN-LAST:event_jTableCourseMouseClicked

    private void jDeleteInstructorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteInstructorButtonActionPerformed
        // TODO add your handling code here:
         instructorModel = (DefaultTableModel) jTableInstructor.getModel();
        
        Instructor details = new Instructor();
         
         //delete row
        
         if(jTableInstructor.getSelectedRowCount()==1){
            
            
             jTableInstructor.getSelectedRow();
             Integer id = Integer.parseInt((String)instructorModel.getValueAt(jTableInstructor.getSelectedRow(), 0));
             dbAccess.deleteInInstructor(instructor_id);
             instructorModel.removeRow(jTableInstructor.getSelectedRow());
         } 
         else{
             if(jTableInstructor.getRowCount()==0){
                 //if table is empty, then display this message 
                 JOptionPane.showMessageDialog(this, "Table is empty");
             }else{
                 //if table is not empty but row is not selected or multiple rows are selected
                 JOptionPane.showMessageDialog(this, "Please select a row for deletion");
             }
             
         }
                               
    }//GEN-LAST:event_jDeleteInstructorButtonActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Universitydatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Universitydatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Universitydatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Universitydatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
    
                new Universitydatabase().setVisible(true);
            }
        });
    }
    private boolean validateFields(){
        if(txtName.getText().trim().isEmpty() ) {
            JOptionPane.showMessageDialog(this, "Enter  Student Name");
            txtName.grabFocus();
            return false;
        }
        if(txtAge.getText().trim().isEmpty() ) {
            JOptionPane.showMessageDialog(this, "Enter Age");
            txtAge.grabFocus();
            return false;
        }
       // if(txtId.getText().trim().isEmpty() ) {
            //JOptionPane.showMessageDialog(this, "Enter  ID");
           // txtId.grabFocus();
            //return false;
        //}
        if(txtMobile.getText().trim().isEmpty() ) {
            JOptionPane.showMessageDialog(this, "Enter Mobile No");
            txtMobile.grabFocus();
            return false;
        }
        if (!jCheckBoxMale.isSelected() && !jCheckBoxFemale.isSelected()) {
            JOptionPane.showMessageDialog(this, "Select Gender");
            return false;
        }
        
       if( txtMobile.getText().length()!=10  ){   
        JOptionPane.showMessageDialog(null,"Enter correct mobile number");
       }
        
        
       return true;
    }
    private void resetFields(){
        txtName.setText("");
        txtAge.setText("");
        //txtId.setText("");
        txtMobile.setText("");
        jCheckBoxMale.setSelected(false);
        jCheckBoxFemale.setSelected(false);
        
        
         
    }
    private boolean validateCourseFields(){
        if(txtcourse.getText().trim().isEmpty() ) {
            JOptionPane.showMessageDialog(this, "Enter  Course Name");
            txtcourse.grabFocus();
            return false;
        }
        if(txtCredits.getText().trim().isEmpty() ) {
            JOptionPane.showMessageDialog(this, "Enter credits");
            txtCredits.grabFocus();
            return false;
        }
        return true;
    }
    
    
    
    
     private boolean validateInstructorFields(){
        if(txtinstructorName.getText().trim().isEmpty() ) {
            JOptionPane.showMessageDialog(this, "Enter Instructor Name");
            txtinstructorName.grabFocus();
            return false;
        }
        if(txtinstructorAge.getText().trim().isEmpty() ) {
            JOptionPane.showMessageDialog(this, "Enter Age");
            txtinstructorAge.grabFocus();
            return false;
        }
       // if(txtId.getText().trim().isEmpty() ) {
            //JOptionPane.showMessageDialog(this, "Enter  ID");
           // txtId.grabFocus();
            //return false;
        //}
        if(txtinstructorMobile.getText().trim().isEmpty() ) {
            JOptionPane.showMessageDialog(this, "Enter Mobile No");
            txtinstructorMobile.grabFocus();
            return false;
        }
        if (!jCheckBox3.isSelected() && !jCheckBox4.isSelected()) {
            JOptionPane.showMessageDialog(this, "Select Gender");
            return false;
        }
        
       if( txtinstructorMobile.getText().length()!=10  ){   
        JOptionPane.showMessageDialog(null,"Enter correct mobile number");
       }
        
        
       return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonCourseDelete;
    private javax.swing.JButton jButtonCourseInsert;
    private javax.swing.JButton jButtonInsert;
    private javax.swing.JButton jButtoncourseUpdate;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBoxFemale;
    private javax.swing.JCheckBox jCheckBoxMale;
    private javax.swing.JButton jDeleteInstructorButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableCourse;
    private javax.swing.JTable jTableInstructor;
    private javax.swing.JTable jTableStudent;
    private javax.swing.JButton jinsertInstructorButton;
    private javax.swing.JButton jupdateInstructorButton;
    private java.awt.Panel panel1;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCredits;
    private javax.swing.JTextField txtMobile;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtcourse;
    private javax.swing.JTextField txtinstructorAge;
    private javax.swing.JTextField txtinstructorMobile;
    private javax.swing.JTextField txtinstructorName;
    // End of variables declaration//GEN-END:variables

    private void populateGUITable() 
    {
        List<Student> studentList = dbAccess.ReadStudentData();
        //studentList[] tblHead = {"ID", "Name", "Price", "Gender"}
        
        for(int i=0;i<studentList.size();i++)
        {
            Student student =  studentList.get(i);
          
            //studentList.add(jtextField.getId());
            String id = "" + student.getId();
            studentModel.setValueAt(id, i, 0);
            studentModel.setValueAt(student.getName(), i, 1);
            String age = "" + student.getAge();
            studentModel.setValueAt(age, i, 2);
            studentModel.setValueAt(student.getGender(), i, 3);
            String mobile = "" + student.getMobileNumber();
            studentModel.setValueAt(mobile, i, 4);
            
            
           // addRow(new Object[]{student.getId(), student.getName(), student.getAge(), student.getGender(), student.getMobileNumber()});
            jTableStudent.setModel(studentModel);
            jTableStudent.setVisible(true);
            
        }
          //studentModel.setValueAt(i, i, i);
            //Error due to this 
            //studentModel.set
            //List.add(student.getId());
       // this.jTableStudent.
    }

    private void populateGUITable(Student student) {
       //this.txtId.setText(student.getId()+"");
       this.txtName.setText(student.getName());
       this.txtAge.setText(student.getAge()+"");
       this.txtMobile.setText(student.getMobileNumber()+"");
      // String Gender;
       //Gender = jCheckBoxMale.isSelected() ? "Male" : "Female";
       //student.setGender(gender);
       //this.jCheckBoxMale.isSelected() ? "Male" : "Female";
       //jCheckBoxMale.setSelected(false);
      // jCheckBoxFemale.setSelected(false);
       
       if(student.getGender().equalsIgnoreCase("Male"))
           this.jCheckBoxMale.setSelected(true);
       else
           this.jCheckBoxFemale.setSelected(true);
       
       
        
    }

    
    
    
    
    
    
    
    
    
    
    
    
    private void populatecourseTable() 
    {
        List<Course> courseList = dbAccess.ReadCourseData();
        //studentList[] tblHead = {"ID", "Name", "Price", "Gender"}
        
        for(int i=0;i< courseList.size();i++)
        {
            Course course =  courseList.get(i);
          
            //studentList.add(jtextField.getId());
            courseModel.setValueAt(course.getId(), i, 0);
            courseModel.setValueAt(course.getCourse(), i, 1);
            String credits = "" + course.getCredits();
            courseModel.setValueAt(credits, i, 2);
           
            
            
           // addRow(new Object[]{student.getId(), student.getName(), student.getAge(), student.getGender(), student.getMobileNumber()});
            jTableCourse.setModel(courseModel);
            jTableCourse.setVisible(true);
            
        }
          //studentModel.setValueAt(i, i, i);
            //Error due to this 
            //studentModel.set
            //List.add(student.getId());
       // this.jTableStudent.
    }

    private void populatecourseTable(Course course) {
       //this.txtId.setText(student.getId()+"");
       this.txtcourse.setText((String) course.getCourse());
       this.txtCredits.setText(course.getCredits()+"");

     
      
    }

   



private void populateInstructorTable() 
    {
        List<Instructor> instructorList = dbAccess.ReadInstructorData();
        //studentList[] tblHead = {"ID", "Name", "Price", "Gender"}
        
        for(int i=0;i<instructorList.size();i++)
        {
            Instructor instructor =  instructorList.get(i);
          
            //studentList.add(jtextField.getId());
            //String id = "" + student.getId();
            //instructorModel.setValueAt(id, i, 0);
            instructorModel.setValueAt(instructor.getName(), i, 0);
            String age = "" + instructor.getAge();
            instructorModel.setValueAt(age, i, 1);
            instructorModel.setValueAt(instructor.getGender(), i, 2);
            String mobile = "" + instructor.getMobileNo();
            instructorModel.setValueAt(mobile, i, 3);
            
            
           // addRow(new Object[]{student.getId(), student.getName(), student.getAge(), student.getGender(), student.getMobileNumber()});
            jTableInstructor.setModel(instructorModel);
            jTableInstructor.setVisible(true);
            
        }
          //studentModel.setValueAt(i, i, i);
            //Error due to this 
            //studentModel.set
            //List.add(student.getId());
       // this.jTableStudent.
    }

    private void populateInstructorTable(Instructor instructor) 
    {
       //this.txtId.setText(student.getId()+"");
       this.txtinstructorName.setText(instructor.getName());
       this.txtinstructorAge.setText(instructor.getAge()+"");
       this.txtinstructorMobile.setText(instructor.getMobileNo()+"");
      // String Gender;
       //Gender = jCheckBoxMale.isSelected() ? "Male" : "Female";
       //student.setGender(gender);
       //this.jCheckBoxMale.isSelected() ? "Male" : "Female";
       jCheckBox3.setSelected(false);
       jCheckBox4.setSelected(false);
       
       if(instructor.getGender().equalsIgnoreCase("Male"))
       {
           this.jCheckBox3.setSelected(true);
       }
       else{
           this.jCheckBox4.setSelected(true);
       }
       }
       
}
        

